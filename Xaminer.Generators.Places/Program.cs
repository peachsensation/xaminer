using System.Net.Http.Json;
using System.Text;
using System.Text.Encodings.Web;
using System.Text.Json;

namespace Xaminer.Generators.Places
{
    internal class Program
    {
        private static readonly Uri s_placesEndpointBase = new("https://metatopos.dijkewijk.nl/");

        private static readonly PlacesJsonContext s_listingContext = new(new(JsonSerializerDefaults.Web)
        {
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        });

        public static async Task Main(string[] args)
        {
            using var client = new HttpClient
            {
                BaseAddress = s_placesEndpointBase,
            };

            var response = await client.GetFromJsonAsync("metatopos-places.json", s_listingContext.PlacesRespBase) ?? throw new HttpRequestException();

            var yieldReturns = GetYieldReturns(response.Places.DistinctBy(x => x.Place));

            var sourceCode =
$$"""
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System.Collections;

namespace Xaminer.App.Models
{
    [System.CodeDom.Compiler.GeneratedCode("Xaminer.Generators.Places", "1.0.0.0")]
    public sealed record Places : IReadOnlyList<string>
    {
        public static readonly Places Enumerable = new Places();

        private Places() { }

        public string this[int index] => _places.ElementAt(index);

        public int Count => _places.Count();

        public IEnumerator<string> GetEnumerator() => _places.GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        private IEnumerable<string> _places
        {
            get
            {
                {{yieldReturns}}
            }
        }
    }
}
""";

            var sourcesDirectory = new DirectoryInfo(AppContext.BaseDirectory).Parent!.Parent!.Parent!;
            var placesCSFile = new FileInfo(Path.Combine(sourcesDirectory.FullName, "Places.gen.cs"));

            await File.WriteAllTextAsync(placesCSFile.FullName, sourceCode);
        }

        private static string GetYieldReturns(IEnumerable<PlacesResp> places)
        {
            var sb = new StringBuilder();

            foreach (var place in places)
            {
                sb.AppendLine();
                sb.Append("yield return \"");
                sb.Append(place.Place);
                sb.Append("\";");
            }

            return sb.ToString();
        }
    }
}